MODULE atm(machineId, initialAmount, cashIncrease)
VAR
    timeSinceCashIncrease : 0..cashIncreaseInterval;
    availableCash : 0..maxAvailableCash;
DEFINE
	cashIncreaseInterval := 20; -- интервал приезда инкассаторов
    maxAvailableCash := 100; -- максимальное количество денег в банкомате
ASSIGN
	-- время с момента последнего приезда инкассаторов
    init(timeSinceCashIncrease) := 0;
	next(timeSinceCashIncrease) := case
        timeSinceCashIncrease = cashIncreaseInterval: 0;
        TRUE: timeSinceCashIncrease + 1;
    esac;

	-- обновляем денежную сумму в банкомате после приезда инкассаторов
	init(availableCash) := initialAmount;
    next(availableCash) := case
        timeSinceCashIncrease = cashIncreaseInterval & (availableCash + cashIncrease  >= maxAvailableCash) : maxAvailableCash;
        timeSinceCashIncrease = cashIncreaseInterval & (availableCash + cashIncrease < maxAvailableCash) : availableCash + cashIncrease;
        TRUE: availableCash;
    esac;

MODULE client(atm, clientId, clientPassword, balance, demand)
VAR
	state: {needForFreeAtm, login, failedToLogin, passedLogin, suspendedFromLogin, encounteredCashStockLimit, encounteredOwnBalanceLimit, encounteredOneReturnLimit, receivedCash};
    loginFailCounter : 0..loginCounterLimit; -- счетчик неудачных попыток авторизации; 3 неудачных попытки приводят к 10-минутной блокировке
	timeSinceLoginSuspension : 0..suspensionTimeLimit; -- таймер блокировки входа
    timeSinceWithdrawLimit : 0..suspensionTimeLimit; -- таймер 10-минутного ожидания, если в банкомате недостаточно денег для выдачи
	cashDemand : 0..demand; -- запрос денег
DEFINE
    suspensionTimeLimit := 10;
	loginCounterLimit := 3;
	id := 10;
	password := 200;
	maxClientId := 1000;
ASSIGN
    -- работа с «состоянием» клиента
    init(state) := needForFreeAtm;
	next(state) := case
	    -- все условия соблюдены — клиент снимает всю сумму
        state = passedLogin & cashDemand <= balance & cashDemand <= 10 & cashDemand <= atm.availableCash : receivedCash;
        -- клиент хочет снять больше денег, чем у него есть на счету
        state = passedLogin & cashDemand > balance : encounteredOwnBalanceLimit;
        -- в банкомате недостаточно денег, чтобы удовлетворить запрос клиента
        state = passedLogin & cashDemand > atm.availableCash : encounteredCashStockLimit;
        -- клиент хочет снять больше 10 рублей за раз
        state = passedLogin & cashDemand > 10 : encounteredOneReturnLimit;
        -- клиент не заблокирован и не ждет, но предыдущая попытка снятия денег не была на 100% удачна
        state = encounteredOwnBalanceLimit | state = encounteredOneReturnLimit : login;
        -- конец ожидания в случае, если в банкомате не было достаточно наличных
        state = encounteredCashStockLimit & timeSinceWithdrawLimit = suspensionTimeLimit : login;
        -- конец блокировки после трех неудачных попыток авторизации
        state = suspendedFromLogin & timeSinceLoginSuspension = suspensionTimeLimit : login;
        -- неудачная попытка авторизации (уже было две) — клиент блокируется на 10 минут
        state = failedToLogin & loginFailCounter = 2 : suspendedFromLogin;
        -- неудачная попытка авторизации
        state = login & (clientId > maxClientId | id != clientId | password != clientPassword) : failedToLogin;
        -- удачная попытка авторизации
        state = login & clientId <= maxClientId & id = clientId & password = clientPassword : passedLogin;
        TRUE : state;
    esac;

    -- обновление счетчика неудачных попыток авторизации
	init(loginFailCounter) := 0;
	next(loginFailCounter) := case
	    -- достигнуто максимальное число неудачных попыток авторизации — обнуляем счетчик
        loginFailCounter = loginCounterLimit : 0;
        TRUE : loginFailCounter + 1;
    esac;

	-- обновление таймера блокировки после трех неудачных авторизаций
	init(timeSinceLoginSuspension) := 0;
	next(timeSinceLoginSuspension) := case
	    -- 10 минут прошло — обнуляем счетчик
        timeSinceLoginSuspension = suspensionTimeLimit : 0;
        TRUE : timeSinceLoginSuspension + 1;
    esac;

	 -- обновление таймера ожидания клиента, если в банкомате не оказалось нужного количества наличных
	init(timeSinceWithdrawLimit) := 0;
	next(timeSinceWithdrawLimit) := case
	    -- 10 минут прошло — обнуляем счетчик
        timeSinceWithdrawLimit = suspensionTimeLimit : 0;
        TRUE : timeSinceWithdrawLimit + 1;
    esac;

	-- корректировка следующего денежного запроса, если клиент сталкивается с:
	-- нехваткой наличных в банкомате
	-- единовременным лимитом снятия в 10 рублей
	-- ограничениями собственного баланса
	init(cashDemand) := demand;
    next(cashDemand) := case
        -- клиент может получить всю сумму за один раз — следующий запрос денег не требуется
        state = passedLogin & cashDemand <= balance & cashDemand <= 10 & cashDemand <= atm.availableCash : 0;
        -- максимум, что может снять клиент — все деньги, что есть у него на счету
        state = encounteredOwnBalanceLimit & cashDemand > balance : balance;
        -- успешно сняли 10 рублей, в следующий раз нужно снять на 10 рублей меньше
        state = encounteredOneReturnLimit & cashDemand <= balance & cashDemand > 10 & cashDemand <= atm.availableCash : cashDemand - 10;
        TRUE : cashDemand;
    esac;

MODULE main
VAR
    client1 : client(atm1, client1Id, client1Password, client1Balance, client1Demand);
	atm1 : atm(1, atm1InitialAmount, atm1CashIncrease);
DEFINE
	client1Id := 10; -- ID клиента
	client1Password := 200; -- Пароль клиента
    client1Balance := 50; -- Количество денег на счету клиента
    client1Demand := 55; -- Запрос денег клиента
    atm1InitialAmount := 10; -- Количество денег в банкомате в начальный момент времени
    atm1CashIncrease := 5; -- Как увеличивается количество денег в банкомате с приездом инкассаторов

-- Заблокированный клиент не может войти в основное меню
CTLSPEC AG (client1.state = suspendedFromLogin -> AX !(client1.state = passedLogin))
-- Невозможно войти в основное меню, не введя правильную комбинацию ID-пароль
CTLSPEC AG (client1.state = login & (client1.id != client1Id | client1.password != client1Password) -> !(client1.state = passedLogin))
CTLSPEC !A [(client1.state = login & (client1.id != client1Id | client1.password != client1Password)) U client1.state = passedLogin]
-- Заблокированный клиент в конце концов сможет войти в систему
CTLSPEC AF (client1.state = suspendedFromLogin -> client1.state = passedLogin)
-- Клиент не может снять больше, чем у него есть на счету
CTLSPEC !AG (client1Balance < client1Demand -> client1.state = receivedCash)
-- Одновременно в банкомат может успешно войти только один клиент с одинаковыми ID
CTLSPEC !AG (client1.state = passedLogin & (client1.state = login | client1.state = failedToLogin))
-- Клиент, которому не выдали деньги, в конце концов их получит
CTLSPEC AG ((client1.state = encounteredCashStockLimit | client1.state = encounteredOwnBalanceLimit | client1.state = encounteredOneReturnLimit) -> AF client1.state = receivedCash);

-- Заблокированный клиент не может войти в основное меню
LTLSPEC G (client1.state = suspendedFromLogin -> X !(client1.state = passedLogin))
-- Невозможно войти в основное меню, не введя правильную комбинацию ID-пароль
LTLSPEC G (client1.state = login & (client1.id != client1Id | client1.password != client1Password) -> F !(client1.state = passedLogin))
LTLSPEC F (client1.state = login & client1.id = client1Id & client1.password = client1Password) -> !(client1.state = passedLogin) U (client1.state = login & client1.id = client1Id & client1.password = client1Password)
-- Заблокированный клиент в конце концов сможет войти в систему
LTLSPEC F ((client1.state = suspendedFromLogin) -> (client1.state = passedLogin))
-- Клиент не может снять больше, чем у него есть на счету
LTLSPEC !G (client1Balance < client1Demand -> client1.state = receivedCash)
-- Одновременно в банкомат может успешно войти только один клиент с одинаковыми ID
LTLSPEC !G (client1.state = needForFreeAtm -> F client1.state = passedLogin & (client1.state = login | client1.state = failedToLogin))
-- Клиент, которому не выдали деньги, в конце концов их получит
LTLSPEC G ((client1.state = encounteredCashStockLimit | client1.state = encounteredOwnBalanceLimit | client1.state = encounteredOneReturnLimit) -> F client1.state = receivedCash);