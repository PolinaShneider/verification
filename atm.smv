MODULE main
VAR
  client1: client (client1Id, client1Password, client1Balance, client1Demand);
  client2: client (client2Id, client2Password, client2Balance, client2Demand);
  atm1: atm(client1, client1Id, client1Password, availableCash);
  atm2: atm(client2, client2Id, client2Password, availableCash);
  bankInstance: bank(atm1, atm2, availableCash);
  availableCash: 0..maxAvailableCash;
DEFINE
	client1Id := 0; -- ID клиента
	client1Password := 123456; -- Пароль клиента
	client1Balance := 50; -- Количество денег на счету клиента
    client1Demand := 45; -- Запрос денег клиента
	client2Id := 1; -- ID клиента
	client2Password := 11111; -- Пароль клиента
	client2Balance := 0; -- Количество денег на счету клиента
    client2Demand := 5; -- Запрос денег клиента
    maxAvailableCash := 100; -- максимальное количество денег в банкомате

    -- Заблокированный клиент не может войти в основное меню
    CTLSPEC AG (client1.state = suspendedFromLogin -> AX !(client1.state = passedLogin))
    -- Невозможно войти в основное меню, не введя правильную комбинацию ID-пароль
    CTLSPEC AG (client1.state = login & (client1.id != client1Id | client1.password != client1Password) -> !(client1.state = passedLogin))
    -- Заблокированный клиент в конце концов сможет войти в систему
    CTLSPEC AF (client1.state = suspendedFromLogin -> client1.state = passedLogin)
    -- Клиент не может снять больше, чем у него есть на счету
    CTLSPEC !AG (client2.balance < client2.demand -> client2.state = receivedCash)
    -- Одновременно в банкомат может успешно войти только один клиент с одинаковыми ID
    CTLSPEC !AG (client1.state = passedLogin & (client1.state = login | client1.state = failedToLogin))
    -- Клиент, которому не выдали деньги, в конце концов их получит
    CTLSPEC AG ((client1.state = encounteredCashStockLimit | client1.state = encounteredOwnBalanceLimit | client1.state = encounteredOneTimeLimit) -> AF client1.state = receivedCash);

    -- Заблокированный клиент не может войти в основное меню
    LTLSPEC G (client1.state = suspendedFromLogin -> X !(client1.state = passedLogin))
    -- Невозможно войти в основное меню, не введя правильную комбинацию ID-пароль
    LTLSPEC G (client1.state = login & (client1.id != client1Id | client1.password != client1Password) -> F !(client1.state = passedLogin))
    -- Заблокированный клиент в конце концов сможет войти в систему
    LTLSPEC F ((client1.state = suspendedFromLogin) -> (client1.state = passedLogin))
    -- Клиент не может снять больше, чем у него есть на счету
    LTLSPEC !G (client2.balance < client2.demand -> client2.state = receivedCash)
    -- Одновременно в банкомат может успешно войти только один клиент с одинаковыми ID
    LTLSPEC !G (client1.state = needForFreeAtm -> F client1.state = passedLogin & (client1.state = login | client1.state = failedToLogin))
    -- Клиент, которому не выдали деньги, в конце концов их получит
    LTLSPEC G ((client1.state = encounteredCashStockLimit | client1.state = encounteredOwnBalanceLimit | client1.state = encounteredOneTimeLimit) -> F client1.state = receivedCash);

-- Модуль банкомата
MODULE bank(atm1, atm2, availableCash)
VAR
    timeSinceCashIncrease : 0..cashIncreaseInterval;
DEFINE
    cashIncreaseInterval := 20; -- интервал приезда инкассаторов
    cashIncrease := 5; -- Как увеличивается количество денег в банкомате с приездом инкассаторов
    maxAvailableCash := 100; -- максимальное количество денег в банкомате
ASSIGN
  init (availableCash) := 10; -- количество доступных денег в банкомате
  init (timeSinceCashIncrease) := 0; -- время с момента приезда инкассаторов

  -- обновляем денежную сумму в банкомате
  next(availableCash) :=
      case
        timeSinceCashIncrease = 0 & availableCash + cashIncrease <= maxAvailableCash : availableCash + cashIncrease;
        atm1.client.state = receivedCash & availableCash >= atm1.client.demand : availableCash - atm1.client.demand;
        atm2.client.state = receivedCash & availableCash >= atm2.client.demand : availableCash - atm2.client.demand;
        TRUE : availableCash;
      esac;

  -- время с момента последнего приезда инкассаторов
  next(timeSinceCashIncrease) := case
    timeSinceCashIncrease = cashIncreaseInterval: 0;
    TRUE: timeSinceCashIncrease + 1;
  esac;

-- Модуль терминала
MODULE atm(client, clientId, clientPassword, availableCash)
DEFINE
    suspensionTimeLimit := 10; -- время ожидания / блокировки клиента
	loginCounterLimit := 3;    -- количество попыток входа
	maxClientId := 2;          -- максимальный возможный ID клиента
	oneTimeLimit := 10;        -- единоразовый лимит снятия наличных
ASSIGN
    init(client.state) := needForFreeAtm;
    next(client.state) := case
        -- все условия соблюдены — клиент снимает всю сумму
        client.state = passedLogin & client.cashDemand <= client.balance & client.cashDemand <= oneTimeLimit & client.cashDemand <= availableCash : receivedCash;
        -- клиент хочет снять больше денег, чем у него есть на счету
        client.state = passedLogin & client.cashDemand > client.balance : encounteredOwnBalanceLimit;
        -- в банкомате недостаточно денег, чтобы удовлетворить запрос клиента
        client.state = passedLogin & client.cashDemand > availableCash : encounteredCashStockLimit;
        -- клиент хочет снять больше 10 рублей за раз
        client.state = passedLogin & client.cashDemand > oneTimeLimit : encounteredOneTimeLimit;
        -- клиент не заблокирован и не ждет, но предыдущая попытка снятия денег не была на 100% удачна
        client.state = encounteredOwnBalanceLimit | client.state = encounteredOneTimeLimit : login;
        -- конец ожидания в случае, если в банкомате не было достаточно наличных
        client.state = encounteredCashStockLimit & client.timeSinceWithdrawLimit = suspensionTimeLimit : login;
        -- конец блокировки после трех неудачных попыток авторизации
        client.state = suspendedFromLogin & client.timeSinceLoginSuspension = suspensionTimeLimit : login;
        -- неудачная попытка авторизации (уже было две) — клиент блокируется на 10 минут
        client.state = failedToLogin & client.loginFailCounter = 2 : suspendedFromLogin;
        -- неудачная попытка авторизации
        client.state = login & (clientId > maxClientId | client.id != clientId | client.password != clientPassword) : failedToLogin;
        -- удачная попытка авторизации
        client.state = login & clientId <= maxClientId & client.id = clientId & client.password = clientPassword : passedLogin;
        TRUE : client.state;
    esac;

    -- обновление счетчика неудачных попыток авторизации
    init(client.loginFailCounter) := 0;
    next(client.loginFailCounter) := case
        -- достигнуто максимальное число неудачных попыток авторизации — обнуляем счетчик
        client.loginFailCounter = loginCounterLimit : 0;
        TRUE : client.loginFailCounter + 1;
    esac;

    -- обновление таймера блокировки после трех неудачных авторизаций
    init(client.timeSinceLoginSuspension) := 0;
    next(client.timeSinceLoginSuspension) := case
        -- 10 минут прошло — обнуляем счетчик
        client.timeSinceLoginSuspension = client.suspensionTimeLimit : 0;
        TRUE : client.timeSinceLoginSuspension + 1;
    esac;

    -- обновление таймера ожидания клиента, если в банкомате не оказалось нужного количества наличных
    init(client.timeSinceWithdrawLimit) := 0;
    next(client.timeSinceWithdrawLimit) := case
        -- 10 минут прошло — обнуляем счетчик
        client.timeSinceWithdrawLimit = client.suspensionTimeLimit : 0;
        TRUE : client.timeSinceWithdrawLimit + 1;
    esac;

    -- корректировка следующего денежного запроса, если клиент сталкивается с:
    -- нехваткой наличных в банкомате
    -- единовременным лимитом снятия в 10 рублей
    -- ограничениями собственного баланса
    next(client.cashDemand) := case
        -- клиент может получить всю сумму за один раз — следующий запрос денег не требуется
        client.state = passedLogin & client.cashDemand <= client.balance & client.cashDemand <= oneTimeLimit & client.cashDemand <= availableCash : 0;
        -- максимум, что может снять клиент — все деньги, что есть у него на счету
        client.state = encounteredOwnBalanceLimit & client.cashDemand > client.balance : client.balance;
        -- успешно сняли 10 рублей, в следующий раз нужно снять на 10 рублей меньше
        client.state = encounteredOneTimeLimit & client.cashDemand <= client.balance & client.cashDemand > oneTimeLimit & client.cashDemand <= availableCash : client.cashDemand - oneTimeLimit;
        TRUE : client.cashDemand;
    esac;

-- Модуль клиента
MODULE client(id, password, balance, demand)
VAR
  state: {needForFreeAtm, login, failedToLogin, passedLogin, suspendedFromLogin, encounteredCashStockLimit, encounteredOwnBalanceLimit, encounteredOneTimeLimit, receivedCash};
  loginFailCounter : 0..loginCounterLimit; -- счетчик неудачных попыток авторизации; 3 неудачных попытки приводят к 10-минутной блокировке
  timeSinceLoginSuspension : 0..suspensionTimeLimit; -- таймер блокировки входа
  timeSinceWithdrawLimit : 0..suspensionTimeLimit; -- таймер 10-минутного ожидания, если в банкомате недостаточно денег для выдачи
  cashDemand : 0..demand; -- запрос денег
DEFINE
    suspensionTimeLimit := 10;
	loginCounterLimit := 3;